fullData <- merge(dataMonthly,famaFrench, by ="Date") %>%
mutate(RiRf = portfolioReturn - RF) %>%
select(Date, `Mkt-RF`, SMB, HML, RiRf)
head(fullData)
fullData <- merge(dataMonthly,famaFrench, by ="Date") %>%
mutate(RiRf = portfolioReturn - RF) %>%  #Creating the left-hand-side of the regression because we have to subtract the risk-free rate
select(`Mkt-RF`, SMB, HML, RiRf) #And selecting out the needed variables
#Did you notice how we used merge() and %>%, pretty cool huh?
fullData <- merge(dataMonthly,famaFrench, by ="Date") %>%
mutate(RiRf = portfolioReturn - RF) %>%  #Creating the left-hand-side of the regression because we have to subtract the risk-free rate
select(`Mkt-RF`, SMB, HML, RiRf) #And selecting out the needed variables
#Did you notice how we used merge() and %>%, pretty cool huh?
fullData <- merge(dataMonthly,famaFrench, by ="Date") %>%
mutate(RiRf = portfolioReturn - RF) %>%  #Creating the left-hand-side of the regression because we have to subtract the risk-free rate
select(`Mkt-RF`, SMB, HML, RiRf) #And selecting out the needed variables
#Did you notice how we used merge() and %>%, pretty cool huh?
head(fullData)
factorExposure <- lm(fullData[,4] ~ fullData[,1] + fullData[,2] + fullData[,3])
factorExposure <- lm(fullData[,4] ~ fullData[,1] + fullData[,2] + fullData[,3])
summary(factorExposure)
head(fullData)
RiRf <- fullData[,4]
MktRf <- fullData[,1]
SMB <- fullData[,2]
HML <- fullData[,3]
factorExposure <- lm(RiRf ~ MktRf + SMB + HML)
summary(factorExposure)
startValue
endValue
?delt
?Delt
??Delt
library(ggplot2)
library(dplyr)
library(Quandl)
#Lets see, what kind of plots can we make with ggplot
aapl <- Quandl("WIKI/AAPL")
#An easy, basic plot
ggplot(aapl, aes(x = Date, y = `Adj. Close`)) + geom_point()
aaplReturns <- Quandl("WIKI/AAPL.11", transform="rdiff")
names(aaplReturns) <- c("Date", "returns")
#And if we plot this, its not real informative
ggplot(aaplReturns, aes(x = Date, y = returns)) + geom_line()
#But, i want to show some elements that are pretty neat
aapl <- merge(aapl, aaplReturns, by = "Date")
ggplot(aapl, aes(x = Date, y = `Adj. Close`, col = returns)) + geom_line()
#And, combine with dplyr to subset the data
aapl %>%
filter(Date>="2010-01-01") %>%
ggplot(aes(x = Date, y = `Adj. Close`, col = returns)) + geom_line()
aapl %>%
filter(Date>="2010-01-01") %>%
ggplot(aes(x = Date, y = `Adj. Close`, col = returns)) + geom_line()
aapl %>%
filter(Date>="2013-01-01") %>%
ggplot(aes(x = Date, y = `Adj. Close`, col = returns)) + geom_line()
?plot
randomStudentGroups <- function(studentNamesVector){
numStudents <- length(studentNamesVector)
numGroups <- floor(numStudents/2)
groupVector <- rep(1:numGroups, 2)
if(length(groupVector) < numStudents){
groupVector <- append(groupVector, 1)
}
randomStudent<-sample(studentNamesVector)
groupAssignments <- cbind(groupVector, randomStudent)
return(groupAssignments[order(groupVector),])  #returns the Nx2 matrix
}
studentNames <- c("J. Alexander","J. Bolton","A. Ferner", "L. Frazier", "T. Frazier", "J. Julian","C. Messer","S. Simon", "B. Torres","B. Walker","K. Winchester","C. Worl")
randomStudentGroups(studentNames)
cap <- 296.74 + 123.04 + 303.98
d <- 296.74 / cap
p <- 123.04 / cap
cs <- 303.98 / cap
wacc <- d*2.068(1-.16) + p *2.27 + cs*3.34
wacc <- d*2.068*(1-.16) + p *2.27 + cs*3.34
wacc
mean(3*4 + 2*3.33 + 4*3 + 2*2.33)
(3*4 + 2*3.33 + 4*3 + 2*2.33)/(3+2+4+2+1)
(3*4 + 3*3.33 + 3*3 + 2*2.33)/(3+2+4+2+1)
source('~/Dropbox/R Code/Academic Code/Pastor_Stambaugh_2003/Pastor_Stambaugh_2003.R', echo=TRUE)
gc()
gc(reset=TRUE)
rm(list = ls())
gc()
gc()
gc(verbose=T)
7500/12
10000/12
install.packages("caret", dependencies = c("Depends", "Suggests"))
?dunn
library(ISLR)
install.packages("ISLR")
library(ISLR)
Smarket
head(Smarket)
summary(Smarket)
data <- Smarket
head(data)
summary(data)
head(data)
glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = "binomial", data = data)
glm_model <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = "binomial", data = data)
summary(glm_model)
head(data)
glm_prob <- predict(glm_model, type="response")
glm_prob[1:10]
data <- Smarket
library(MASS)
train <- data[data$Year<2005,]
test <- data[data$Year>=2005,]
glm_model <- glm(Direction ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5 + Volume, family = "binomial", data = train)
summary(glm_model)
glm_prob <- predict(glm_model, type="response", newdata = test)
glm_pred <- ifelse(glm_prob>0.5, "Up", "Down")
table(test$Direction, glm_pred)
table(glm_pred, test$Direction)
lda_model <- lda(Direction ~ Lag1 + Lag2, data=train)
lda_model
lda_pred <- predict(lda_model, test)
lda_pred$class
table(lda_pred$class), test$Direction)
table(lda_pred$class, test$Direction)
mean(glm_pred==test$Direction)
mean(lda_pred$class==test$Direction)
lda_pred$posterior
qda_model <- qda(Direction ~ Lag1 + Lag2, data=train)
qda_model
qda_pred <- predict(qda_model, newdata = test)
table(qda_pred, test$Direction)
qda_pred <- predict(qda_model, newdata = test)
table(qda_pred, test$Direction)
qda_model
table(qda_pred$class, test$Direction)
mean(qda_pred$class == test$Direction)
library(class)
a <- cbind(Lag1, Lag2)[data$Year<2005]
a <- cbind(train$Lag1, train$Lag2)
head(a)
test_mat <_ cbind(test$Lag1, test$Lag2)
test_mat <- cbind(test$Lag1, test$Lag2)
train_dir <- train$Direction
knn_pred <- knn(train_mat, test_mat, train_dir, k=1)
knn_pred <- knn(train_mat, test_mat, train$Direction, k=1)
train_mat <- cbind(train$Lag1, train$Lag2)
test_mat <- cbind(test$Lag1, test$Lag2)
set.seed(1)
knn_pred <- knn(train_mat, test_mat, train$Direction, k=1)
table(knn_pred, test$Direction)
mean(knnn_pred == test$Direction)
mean(knn_pred == test$Direction)
knn_pred <- knn(train_mat, test_mat, train$Direction, k=3)
table(knn_pred, test$Direction)
mean(knn_pred == test$Direction)
attach(Caravan)
data <- Caravan
summary(Caravan)
summary(data)
head(data)
summary(Purchase)
attach(data)
summary(Purchase)
standardized <- scale(data[,-86])
head(data[,-86])
data[,86]
test_ind <- 1:1000
train <- standardized[-test_ind,]
test <- standardized[test_ind,]
test_res <- data$Purchase[test_ind]
knn_pred <- knn(train, test, train_res, k=1)
train_res <- data$Purchase[-test_ind]
test_res <- data$Purchase[test_ind]
#now run KNN
set.seed(1)
knn_pred <- knn(train, test, train_res, k=1)
mean(test_res ==knn_pred)
table(knn_pred, test_res)
9/ (68+9)
train <- data[-test_ind,]
test <- data[test_ind]
test <- data[test_ind,]
glm_model <- glm(Purchase ~., data = train, family = "binomial")
glm_model
glm_pred <- predict(glm_model, newdata = test)
glm_pred <- ifelse(glm_pred > 0.25, "Yes", "No")
table(glm_pred, test$Purchase)
glm_pred <- predict(glm_model, newdata = test, type="response")
glm_pred <- ifelse(glm_pred > 0.25, "Yes", "No")
table(glm_pred, test$Purchase)
11/(22+11)
library(ISLR)
set.seed(1)
train = sample(392, 196)
?sample
lm_fit <- lm(mpg~horsepower, data = Auto, subset=train)
summary(lm_fit)
library(boot)
glm_fit <- glm(mpg~horsepower, data = Auto)
cv_err <- cv.glm(Auto, glm_fit)
cv_err$delta
sum(1:50)
a <- runif(1000, min=1, max = 7)
a <- runif(10000, min=1, max = 7)
x <- data.frame()
x <- cbind(x, a)
a <- floor(runif(size, min=1, max = 7)  )
size <- 10000
a <- floor(runif(size, min=1, max = 7)  )
head(a)
x <- data.frame(floor(runif(size, min=1, max = 7)) )
N <- 8
M <- 24
size <- (N ^ 6) *2
x <- data.frame(floor(runif(size, min=1, max = 7)) )
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
roll_sum <- rowSums(x)
head(roll_sum)
x2 <- x %>%
mutate(roll_sum=rowSums())
(dplyr)
library(dplyr)
x2 <- x %>%
mutate(roll_sum=rowSums())
head(x)
paste("D", 1:N, sep = "")
names(x) <- paste("D", 1:N, sep = "")
head(x)
x2 <- x %>%
mutate(roll_sum=rowSums())
x$sum <- rowSums(x)
head(x)
colMeans(x)  #all pretty close to 3.5, as they should be
sum <- 1000000000
x <- data.frame(floor(runif(size, min=1, max = 7)) )
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
size <- 1000000000
x <- data.frame(floor(runif(size, min=1, max = 7)) )
size <- 100000000
library(plyr)
mem_used(x)
library(pryr)
library(dplyr)
library(plyr)
mem_change(size <- 100000000)
mem_change(size <- 100000000)
mem_change(size <- 1000000000)
rm(size)
mem_used()
size <- 1000000000
mem_change(x <- data.frame(floor(runif(size, min=1, max = 7)) ))
size <- 10000000
mem_change(x <- data.frame(floor(runif(size, min=1, max = 7)) ))
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
N <- 8
M <- 24
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
size <- 1e7
names(x) <- paste("D", 1:N, sep = "")
head(x)
mem_used()
size <- 5e7
colMeans(x)  #all pretty close to 3.5, as they should be
size <- 5e7
mem_change(x <- data.frame(floor(runif(size, min=1, max = 7)) ))
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
colMeans(x)  #all pretty close to 3.5, as they should be
size <- 2e7
mem_change(x <- data.frame(floor(runif(size, min=1, max = 7)) ))
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
names(x) <- paste("D", 1:N, sep = "")
head(x)
colMeans(x)  #all pretty close to 3.5, as they should be
x$sum <- rowSums(x)
head(x)
x <- x %>%
filter(roll_sum == M)
x <- x %>%
filter(sum == M)
head(x)
x <- x %>%
filter(sum == M) %>%
select(-sum)
head(x)
?rowproduct
x$product <- rowProds(x)
x$product <- apply(x, 1, prod)
head(x)
prod(x[1, 1:8])
mean(x$product)
sd(x$product)
x2 <- x %>%
unique()
x2 <- x %>%
unique() %>%
summarise(exp_value = mean(product),
sd = sd(product))
x2
x2 <- x %>%
unique()
summarise(x, exp_value = mean(product), sd = sd(product))
x2 <- x2 %>%
summarise(exp_value = mean(product),
sd = sd(product))
x2
x <- data.frame(floor(runif(size, min=1, max = 7)) )
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
a
x <- data.frame(floor(runif(size, min=1, max = 7)) )
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
names(x) <- paste("D", 1:N, sep = "")
head(x)
x$sum <- rowSums(x)
head(x)
x <- x %>%
filter(sum == M) %>%
select(-sum)
2
x$product <- apply(x, 1, prod)
summarise(x, exp_value = mean(product), sd = sd(product))
2nd_run <- summarise(x, exp_value = mean(product), sd = sd(product))
2nd_run <- summarise(x, exp_value = mean(product), sd = sd(product))
second_run <- summarise(x, exp_value = mean(product), sd = sd(product))
x3 <- x %>%
unique() %>%
summarise(exp_value = mean(product),
sd = sd(product))
first_run; second_run; x2; x3
second_run; x2; x3
NandM <- function(N, M, size) {
x <- data.frame( floor(runif(size, min=1, max = 7)) )
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
names(x) <- paste("D", 1:N, sep = "")
#Pull out the rows equal to M
x$sum <- rowSums(x)
x <- x %>%
filter(sum == M) %>%
select(-sum)
#compute the product
x$product <- apply(x, 1, prod)
names(x) <- 1:N
names(x) <- 1:N
head(x)
library(dplyr)
NandM <- function(N, M, size) {
x <- data.frame( floor(runif(size, min=1, max = 7)) )
for(die in 2:N){
a <- floor(runif(size, min=1, max = 7)  )
x <- cbind(x, a)
}
names(x) <- 1:N
#Pull out the rows equal to M
x$sum <- rowSums(x)
x <- x %>%
filter(sum == M) %>%
select(-sum)
#compute the product
x$product <- apply(x, 1, prod)
#Pull out the unique values and compute the answers
return(x %>% unique() %>% summarise(exp_value = mean(product), sd = sd(product)))
}
N <- 8
M <- 24
size <- 2e7
answer <- NandM(N, M, size)
answer
answer2 <- NandM(N, M, size)
answer; answer2
setwd("/home/chasedehan/Dropbox/R Code/ML/Data Incubator")
library(tidyverse)
library(lubridate)
months <- rep(1:9)
file <- "-citibike-tripdata.csv"
read_files <- paste("20150",months,file, sep ="")
read_files <- c(read_files,paste("2015",c(10,11,12), file, sep=""))
data <- read_csv(read_files[1])
head(data)
?grep
data <- data %>%
mutate(starttime2 = mdy_hms(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
data <- data %>%
mutate(starttime2 = mdy_ms(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_ms(stoptime))
library(lubridate)
data <- data %>%
mutate(starttime2 = mdy_ms(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_ms(stoptime))
data <- data %>%
mutate(starttime2 = mdy_hm(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_hm(stoptime))
data <-rbind(data, read_csv(read_files[6]))
data <- data %>%
mutate(starttime2 = mdy_hms(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
data <- read_csv(read_files[1])
data <-rbind(data, read_csv(read_files[6]))
data <- data %>%
mutate(starttime2 = mdy_hms(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
data <- read_csv(read_files[1])
data <-rbind(data, read_csv(read_files[5]))
#split dates into two parts
data <- data %>%
mutate(starttime2 = mdy_hms(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
length(data$starttime)
length(data$starttime[1])
nchar(data$starttime[1])
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) > 14)
b <- data %>%
select(starttime) %>%
filter(nchar(starttime) <= 14)
nrow(a) + nrow(b)
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) > 14) %>%
mutate(starttime2 = ymd_hms(starttime))
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) > 14) %>%
mutate(starttime2 = ymd_hm(starttime))
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) > 14)
head(a)
tail(a)
nchar(a$starttime[1])
nchar(a$starttime[1113544])
nchar(a$starttime[1113542])
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) > 15) %>%
mutate(starttime2 = ymd_hms(starttime))
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) < 15) %>%
mutate(starttime2 = ymd_hm(starttime))
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) < 15)
head(a)
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) < 15) %>%
mutate(starttime2 = ymd_hm(starttime))
names(a)
head(a)
a <- data %>%
select(starttime) %>%
filter(nchar(starttime) < 15)
head(a)
names(a)
?parse_date_time
data <- data %>%
mutate(starttime2 = parse_date_time(starttime),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
data <- data %>%
mutate(starttime2 = parse_date_time(starttime, c(mdy_hms, mdy_hm)),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
data <- data %>%
mutate(starttime2 = parse_date_time(starttime, c("mdy_hms", "mdy_hm")),   #the dates aren't being coerced correctly
stoptime2 = mdy_hms(stoptime))
data <- data %>%
mutate(starttime2 = parse_date_time(starttime, c("mdy_hms", "mdy_hm")) )   #the dates aren't being coerced correctly
setwd("/home/chasedehan/Dropbox/R Code/ML/Data Incubator")
library(tidyverse)
library(lubridate)
months <- rep(1:9)
file <- "-citibike-tripdata.csv"
read_files <- paste("20150",months,file, sep ="")
read_files <- c(read_files,paste("2015",c(10,11,12), file, sep=""))
data <- read_csv(read_files[1])
data <-rbind(data, read_csv(read_files[5]))
data <- data %>%
mutate(starttime = parse_date_time(starttime, c("mdy_hms", "mdy_hm")) ,   #the dates aren't being coerced correctly
stoptime = parse_date_time(stoptime, c("mdy_hms", "mdy_hm")) ,
month = month(starttime),
duration = stoptime - starttime)
head(data)
tail(data)
median(data$duration[data$duration >=0])
nrow(data[data$`start station id` == data$`end station id`,]) / nrow(data) #0.02235839
a <- data[complete.cases(data),]
